@page "/admin/section/list"

@layout AdminLayout


<div class="d-flex flex-column">


    <div class="d-flex justify-content-end my-1 w-100">
    <NavLink href="/admin/section/add" class="btn btn-sm btn-outline-success btn-add">Add</NavLink>
</div>

<table class="table table-striped table-bordered table-hover table-sm">

    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Priority</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var section in Sections)
        {
            var updateUrl = $"/admin/section/update/{section.Id}";
            <tr>
                <td> @(section.Id ) </td>
                <td> @(section.Name) </td>
                <td> @(section.Priority) </td>

                <td><NavLink class="btn btn-sm btn-outline-warning mx-1" href="@updateUrl">Update</NavLink></td>
                <td><button class="btn btn-sm btn-outline-danger" @onclick="@(()=> {DeleteSection(section.Id);})">Delete</button></td>
            </tr>
        }

    </tbody>

</table>
</div>






@code {

    public IEnumerable<SectionModel> Sections = new List<SectionModel>();

    [Inject]
    public IUniversityService UniversityService { get; set; }

    [Inject]
    public NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Sections = await UniversityService.GetSections();
    }

    private void DeleteSection(string id)
    {
        var res = UniversityService.DeleteSection(id).GetAwaiter().GetResult();

        if (res)
        {
            navigationManager.NavigateTo("/admin/Section/list");
            StateHasChanged();
        }

    }

}
